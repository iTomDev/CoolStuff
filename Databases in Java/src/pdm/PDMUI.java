/*
 * Tom, 21048743
 * Lee 
 * Felix
 * Peter 
 * James 
 * Sheffield Hallam university
 * Software Engineering Group Project
 * Add your names and SNs and stuff
 *
 * TODO:
 * + save record
 * + saving database stuff, less duplication, remove test stuff
 * + proper example records
 * + load images using url from DB
 * + share feature
 * + add category form
 * + add settings form
 * + search feature
 */
package pdm;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import static pdm.DataInterface.ITEM_LIST_MAXIMUM;



/**
 *
 * @author Stargaze
 */
public class PDMUI extends javax.swing.JFrame {

    // Main application data
    // user data structure
    //DataInterface DB = new TextDatabase();
    DataInterface DB = new RelationalDatabase();
    
//String[][] UserData = new String[FILEROWS][FILECOLS];
    String[][] CategoryList = new String[DataInterface.CATEGORY_LIST_MAXIMUM][2]; // cols: category id, name
    //int CategoryListLength = 0; 
    String[][] ItemList = new String[ITEM_LIST_MAXIMUM][2]; // item name, cols: recordid, name 
    //int ItemListLength = 0;
    String[][] ItemData =  new String[ITEM_LIST_MAXIMUM][4];
    
    // current record being used
    int currIndexUserData = 0;
    int currCategoryID = 0;
    String currImagePath = "";
    
    
    // Maintain a local copy of the current record and parameters
    
    
    
    /**
     * Creates new form PDMUI
     */
    public PDMUI() {
        initComponents();
        
        this.setTitle("Abstract Data Management");
        
        // load user data from file
        DB.init();
        
        // update the category drop down box
        updateCategoryList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jToolBar1 = new javax.swing.JToolBar();
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jLabel4 = new javax.swing.JLabel();
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jCategory = new javax.swing.JComboBox<>();
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jLabel6 = new javax.swing.JLabel();
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jItem = new javax.swing.JComboBox<>();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jButtonGo = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 0), new java.awt.Dimension(50, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jTextSearch = new javax.swing.JTextField();
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jSearch = new javax.swing.JButton();
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jPanel2 = new javax.swing.JPanel();
        jLabelName = new javax.swing.JLabel();
        jLabelCategory = new javax.swing.JLabel();
        jButtonSave = new javax.swing.JButton();
        jTextName = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextBlock = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jTextPath = new javax.swing.JTextField();
        jButtonDelete = new javax.swing.JButton();
        jLabelData1 = new javax.swing.JLabel();
        jTextData1 = new javax.swing.JTextField();
        jImport = new javax.swing.JButton();
        jButtonSelectImage = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTextShareToEmail = new javax.swing.JTextField();
        jButtonSend = new javax.swing.JButton();
        jButtonSettings = new javax.swing.JButton();
        jLabelData2 = new javax.swing.JLabel();
        jTextData2 = new javax.swing.JTextField();
        jComboCategory2 = new javax.swing.JComboBox<>();
        jButtonNewCategory = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.add(filler8);

        jLabel4.setText("Category");
        jToolBar1.add(jLabel4);
        jToolBar1.add(filler7);

        jCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jCategoryMouseReleased(evt);
            }
        });
        jCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCategoryActionPerformed(evt);
            }
        });
        jToolBar1.add(jCategory);
        jToolBar1.add(filler6);

        jLabel6.setText("Item");
        jToolBar1.add(jLabel6);
        jToolBar1.add(filler5);

        jItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jItemActionPerformed(evt);
            }
        });
        jToolBar1.add(jItem);
        jToolBar1.add(filler4);

        jButtonGo.setText("Go!");
        jButtonGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGoActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonGo);
        jButtonGo.getAccessibleContext().setAccessibleName("Go");

        jToolBar1.add(filler1);
        jToolBar1.add(filler11);
        jToolBar1.add(filler2);

        jTextSearch.setText("Search text...");
        jToolBar1.add(jTextSearch);
        jToolBar1.add(filler10);

        jSearch.setText("Search");
        jSearch.setFocusable(false);
        jSearch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchActionPerformed(evt);
            }
        });
        jToolBar1.add(jSearch);
        jToolBar1.add(filler9);
        jToolBar1.add(filler3);

        jLabelName.setText("Item Name");

        jLabelCategory.setText("Item Category");

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jTextName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextNameFocusLost(evt);
            }
        });

        jTextBlock.setColumns(20);
        jTextBlock.setRows(5);
        jTextBlock.setWrapStyleWord(true);
        jTextBlock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextBlockFocusLost(evt);
            }
        });
        jScrollPane4.setViewportView(jTextBlock);

        jLabel5.setText("Image");

        jTextPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextPathActionPerformed(evt);
            }
        });

        jButtonDelete.setLabel("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jLabelData1.setText("jLabelData1");

        jTextData1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextData1FocusLost(evt);
            }
        });
        jTextData1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextData1ActionPerformed(evt);
            }
        });

        jImport.setText("Import");
        jImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jImportActionPerformed(evt);
            }
        });

        jButtonSelectImage.setText("Select Image");
        jButtonSelectImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectImageActionPerformed(evt);
            }
        });

        jLabel8.setText("Share to");

        jTextShareToEmail.setText("share.to@example.com");
        jTextShareToEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextShareToEmailActionPerformed(evt);
            }
        });

        jButtonSend.setText("Send");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jButtonSettings.setLabel("Settings");
        jButtonSettings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSettingsActionPerformed(evt);
            }
        });

        jLabelData2.setText("jLabelData2");

        jComboCategory2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboCategory2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboCategory2ActionPerformed(evt);
            }
        });

        jButtonNewCategory.setText("New Category");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextPath)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jTextShareToEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonSend)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButtonSettings)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonSave)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonSelectImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jImport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonNewCategory)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelCategory)
                                    .addComponent(jLabelData2)
                                    .addComponent(jLabelData1)
                                    .addComponent(jLabelName))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextData1)
                                    .addComponent(jTextData2)
                                    .addComponent(jTextName)
                                    .addComponent(jComboCategory2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName)
                    .addComponent(jTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCategory)
                    .addComponent(jComboCategory2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelData1)
                    .addComponent(jTextData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextData2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelData2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSelectImage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextShareToEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSend)
                            .addComponent(jImport))
                        .addContainerGap(43, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonDelete)
                            .addComponent(jButtonSave)
                            .addComponent(jButtonSettings)
                            .addComponent(jButtonNewCategory)))))
        );

        jPanel3.setName(""); // NOI18N

        jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane1.setViewportView(jLabel1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2.getAccessibleContext().setAccessibleName("");
        jPanel2.getAccessibleContext().setAccessibleDescription("");
        jPanel3.getAccessibleContext().setAccessibleName("Go");
        jPanel3.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGoActionPerformed

        // get the index of the selected drop down and look up the corresponding
        // UserData index in the ItemArray
        int selectedindex = jItem.getSelectedIndex();
        // get recid from the ItemList
        String recidstr = ItemList[jItem.getSelectedIndex()][0];
        int recid = Integer.valueOf(recidstr);
        
        displayItemDataByUserIndex(recid);
        
        // set it as the current record id (This might be wrong, cant remember how I wanted it before)
        currIndexUserData = recid;
        
    }//GEN-LAST:event_jButtonGoActionPerformed

    /**
     * Saves the data from the GUI to the database
     * <p>
     * Saves the data from the GUI to the database if existing record already
     * exists. This is done by deleting the old record and replacing it. If the
     * record does not already exist it is created.
     * @author Thomas Pile, b1048743@my.shu.ac.uk, Sheffield Hallam Uni
     */
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        
        // TODO add your handling code here:
        //DB.saveDataFile();

        //int currUserDataID = 0;
        int currUserDataID = currIndexUserData;
        int currCategoryID = 0;
        
        String currItemName = "";
        String[][] CategoryArray = new String[5][2]; // categoryid, category name
        String[][] DataRecord = new String[5][4]; //  label, stringvalue, numbervalue, boxnumber

        // if existing record
        if(currUserDataID>0)
        {
            // get the name from the name box
            currItemName = jTextName.getText();
            
            // get the category from the category box, and find the category id from the categorylist array
            int catid = Integer.parseInt( CategoryList[jComboCategory2.getSelectedIndex()][0] );
            System.out.println("catid: "+catid);
            
            // delete the record and the GUIdata components
            DB.removeDataRecord(currUserDataID);
            
            // create a new record
            //currUserDataID = DB.createDataRecord(currCategoryID, currItemName);
            currUserDataID = DB.createDataRecord(catid, currItemName);
            
            // get the titles for that category
            String[][] titles = DB.getComponentTitleList(catid);
            
            // load the image and enter it to the db
            // get the path from the selection box
            String path = jTextPath.getText();
            // remove all of the leading path stuff by looping through
            // the string and the removing evereything before the backslash.
            // needs escape characters, multiple iterations too
            int path_backslashid = 0;
            while(path_backslashid>-1)
            {
                path_backslashid = path.indexOf("\\");
                path = path.substring(path_backslashid+1, path.length());
            }
            // save the url to the db
            DB.createGUIComponentValue(Integer.parseInt(titles[3][0]), currUserDataID, path, 0);
            // clear the path field
            jTextPath.setText("");
            
            // field 1
            String td1 = jTextData1.getText();
            DB.createGUIComponentValue(Integer.parseInt(titles[0][0]), currUserDataID, td1, 0);
            
            // field 2
            String td2 = jTextData2.getText();
            DB.createGUIComponentValue(Integer.parseInt(titles[1][0]), currUserDataID, td2, 0);
            
            // field 3
            String td3 = jTextBlock.getText();
            DB.createGUIComponentValue(Integer.parseInt(titles[3][0]), currUserDataID, td3, 0);
            
            // update the category drop down box
            updateCategoryList();
        }
        
        // basically works too, but meh
        else
        {
            // create new record
            //createGUIComponentValue(int guicomponenttitleid, int recordid, String strvalue, int numvalue);
            
            // problem: image path not saved to db
            
            // enter into db
            //DB.createGUIComponentValue(TitleListID[1], currUserDataID, jTextData2.getText(), 0);
            
            // debug
            //System.out.println("path: "+jTextPath.getText());
            //System.out.println("path:"+path);
            
            //------------------
            // test the db is working right for entries
            
            // cats llist works
            String[][] cats = DB.getCategoryList();
            for (int i=0;i<cats.length;i++)
            {
                System.out.print("DB.getCategoryList(): "+cats[i][0]);
                System.out.println(" "+cats[i][1]);
            }
            
            // list category GUI component titles
            int catid = 1;
            String[][] titles = DB.getComponentTitleList(catid);
            for(int i=0;i<titles.length;i++)
            {
                //TitleListID[i] = Integer.parseInt(TitleList[i][0]);
                System.out.print("TitleListID[i] "+titles[i][0]);
                System.out.println(" "+titles[i][1]);
            }
            
            // create record - works!
            int recid = DB.createDataRecord(Integer.parseInt(cats[0][0]), "test_record_1");
            System.out.print("new recid: "+recid);
            // add some data for the record
            DB.createGUIComponentValue(Integer.parseInt(titles[0][0]), recid, "field1", 0);
            DB.createGUIComponentValue(Integer.parseInt(titles[1][0]), recid, "field2", 0);
            DB.createGUIComponentValue(Integer.parseInt(titles[3][0]), recid, "shurobotics.jpg", 0); 
        }      
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // remove current record from userdata, then save
        //DB.removeUserDataRecordByIndex(currIndexUserData);
        //DB.saveDataFile();
        DB.removeDataRecord(currIndexUserData);
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCategoryActionPerformed
        
        // update item menu based on current category selection
        //updateItemsList(jCategory.getItemAt(jCategory.getSelectedIndex()));
        
        // get coregory selection
        int catsel = jCategory.getSelectedIndex();
        if(catsel>-1) // if list isnt empty
        {
            // convert to int, get corresponding categoryid from category array
            int catid = Integer.parseInt(CategoryList[catsel][0]);
            // update item menu based on current category selection
            updateItemsList(catid);
            updateLabelNames(catid);
            currCategoryID = catid;
            
            // sync the other combo box
            //jComboCategory2.setSelectedIndex(catsel);
        }
        
    }//GEN-LAST:event_jCategoryActionPerformed

    private void jCategoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCategoryMouseReleased
        // TODO add your handling code here:
        //jCategory.getSelectedItem());
        //
    }//GEN-LAST:event_jCategoryMouseReleased

    private void jItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jItemActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jItemActionPerformed

    private void jTextData1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextData1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextData1ActionPerformed

    private void jTextNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextNameFocusLost
    }//GEN-LAST:event_jTextNameFocusLost

    private void jTextData1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextData1FocusLost
    }//GEN-LAST:event_jTextData1FocusLost

    private void jTextBlockFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextBlockFocusLost
    }//GEN-LAST:event_jTextBlockFocusLost

    private void jImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jImportActionPerformed
        // import image for current record 
        if(jTextPath.getText() != null)
        {
            //if (jTextPath.getText().endsWith(".jpg"))
            {
                currImagePath = "images/".concat(currImagePath);
                // check file exists
                //File file = new File(currImagePath);
                
                //if(file.exists())
                {
                    // set in userdata
                    //DB.setRecordAttribute(currIndexUserData, 5, jTextPath.getText());
                    //saveDataFile();
                    
                    // display the image
                    ImageIcon iconLogo2 = new ImageIcon(currImagePath);
                    jLabel1.setIcon(iconLogo2);
                    jLabel1.repaint();
                    this.repaint();
                }
            }
                    
        }
    }//GEN-LAST:event_jImportActionPerformed

    private void jSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchActionPerformed
        // search titles
        
        String searchterm = jTextSearch.getText();
        
        //displayDataByUserIndex(DB.searchRecords(searchterm));
        
        
    }//GEN-LAST:event_jSearchActionPerformed

    private void jButtonSelectImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectImageActionPerformed
        // https://netbeans.org/kb/docs/java/gui-filechooser.html
        //jFileChooser1
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            //try {
              // What to do with the file, e.g. display it in a TextArea
              //jTextPath.read( new FileReader( file.getAbsolutePath() ), null );
              //jFileChooser1.getSelectedFile();
              jTextPath.setText(file.getAbsolutePath());
              
              ImageIcon iconLogo1 = new ImageIcon(file.getAbsolutePath());
              jLabel1.setIcon(iconLogo1);
              jLabel1.repaint();
            //} catch (IOException ex) {
            //  System.out.println("problem accessing file"+file.getAbsolutePath());
            //}
        } else {
            System.out.println("File access cancelled by user.");
        }        
    }//GEN-LAST:event_jButtonSelectImageActionPerformed

    private void jButtonSettingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSettingsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSettingsActionPerformed

    private void jTextShareToEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextShareToEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextShareToEmailActionPerformed

    private void jComboCategory2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboCategory2ActionPerformed
        // TODO add your handling code here:
        // update item menu based on current category selection
        //updateItemsList(jCategory.getItemAt(jCategory.getSelectedIndex()));
        
        // get coregory selection
        int catsel = jComboCategory2.getSelectedIndex();
        if(catsel>-1) // if list isnt empty
        {
            // convert to int, get corresponding categoryid from category array
            int catid = Integer.parseInt(CategoryList[catsel][0]);
            // update item menu based on current category selection
            updateItemsList(catid);
            updateLabelNames(catid);
            currCategoryID = catid;
            
            // sync the other combo box
            //jCategory.setSelectedIndex(catsel);
        }
        
    }//GEN-LAST:event_jComboCategory2ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // close db connection
        DB.closeDBConnection();
    }//GEN-LAST:event_formWindowClosing

    private void jTextPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextPathActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextPathActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonSendActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PDMUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PDMUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PDMUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PDMUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PDMUI().setVisible(true);
            }
        });
        
    }
    
    // go through the data array and grab all the item types for a given category type
    // yes there are more efficient ways to do this
    public void updateItemsList(int catid)
    {
        ItemList = DB.getRecordListForCategory(catid);
        //
        
        jItem.removeAllItems();
        // add items to the list
        for(int i=0; i<ItemList.length; i++)
        {
            jItem.addItem(ItemList[i][1]);
        }
    }
    
    // go through the data array and grab all the category types
    // yes there are more efficient ways to do this
    public void updateCategoryList()
    {
        // get category list
        CategoryList = DB.getCategoryList();
        //System.out.println("CategoryList  "+CategoryList[0][0]);
        
        jCategory.removeAllItems();
        jComboCategory2.removeAllItems();
        
        // add items to the list
        for(int i=0; i<CategoryList.length; i++)
        {
            jCategory.addItem(CategoryList[i][1]);
            jComboCategory2.addItem(CategoryList[i][1]);
        }
    }
    
    public void updateLabelNames(int catid)
    {
        // update the gui data fields for that category
        // get the GUI category labels
        String[][] ComponentTitleList = DB.getComponentTitleList(catid);
        // loop through labels
        for(int i=0;i<ComponentTitleList.length;i++)
        {
            // match the box number to the corresponding GUI box number
            // otherwise the order of the labels could change
            switch(Integer.parseInt(ComponentTitleList[i][2]))
            {
                case 0:
                    //
                    break;
                case 1:
                    jLabelData1.setText(ComponentTitleList[i][1]);
                    break;
                case 2:
                    jLabelData2.setText(ComponentTitleList[i][1]);;
                    break;
            }
        }
    }
    
    
    // nx4, cols: label, stringvalue, numbervalue, boxnumber
    /**
     * Retrieves a given data record from the database and displays it in the GUI.
     * <p>
     * In common with other GUI functions this provides an "glue" logic function
     * between the GUI and the database functions, in the case where the method 
     * is too long to fit within the swing event listener. 
     * This method takes recordid, recid, as a parameter and then the following 
     * actions are taken:
     * 1. The recordid is displayed in a GUI box
     * 2. Request the data from the data in the form of a GUIComponentTriple
     * 3. Loop trough the GUIComponent pairs
     * 3.1 Set the GUIComponentTitle as the jLabel value
     * 3.2 Set the GUIComponentValue as the jTextBox value
     * Further Guidance
     * The GUIComponentTriple returns an nx4 data structure having fields:
     * (n,1)=label, (n,2)=stringvalue, (n,3)=numbervalue, (n,4)=boxnumber
     * The label is the value for the jLabel
     * The string value is the value for the text box, or the image url
     * The number value is an optional numerical field
     * The box number is the which number box in the gui the data should go in
     * @param recid the unique id of the user data record to be retrieved
     * @author Thomas Pile, b1048743@my.shu.ac.uk, Sheffield Hallam Uni
     */
    public void displayItemDataByUserIndex(int recid)
    {
        jTextName.setText(DB.getUserDataName(recid));
        
        // get the data components of the record
        String[][] ItemData = DB.getGUIComponentTriple(recid);
        
        // display the data
        // loop through labels
        System.out.println("");
        System.out.println("");
        for(int i=0;i<ItemData.length;i++)
        {
            System.out.println("ItemData[i][1]: "+" "+i+" "+ItemData[i][1]);
            
            // match the box number to the corresponding GUI box number
            // otherwise the order of the labels could change
            switch(Integer.parseInt(ItemData[i][3]))
            {
                case 0:
                    //
                    break;
                case 1:
                    jLabelData1.setText(ItemData[i][0]); // label
                    jTextData1.setText(ItemData[i][1]); // string data value
                    break;
                case 2:
                    jLabelData2.setText(ItemData[i][0]);
                    jTextData2.setText(ItemData[i][1]); // string data value
                    break;
                case 3:
                    jTextBlock.setText(ItemData[i][0]); // string data value
                    break;
                case 5:
                    // image path
                    String urlfromdb = ItemData[i][1];
                    System.out.println("image url"+urlfromdb);
                    currImagePath = "images/".concat(urlfromdb);
                    // display the image
                    ImageIcon iconLogo1 = new ImageIcon(currImagePath);
                    
                    jLabel1.setIcon(iconLogo1);
                    jLabel1.repaint();
                    
                    break;
                default:
                    //
            }
        }
        
        /*
        // block
        // value
        jTextBlock.setText(recvals[4][1]);
        
        // image
        if(recvals[5][0].equalsIgnoreCase("imagepath"))
        {
            currImagePath = "images/".concat(recvals[5][1]);
            // display the image
            ImageIcon iconLogo1 = new ImageIcon(currImagePath);
            jLabel1.setIcon(iconLogo1);
            jLabel1.repaint();
        }
        */
    }

        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonGo;
    private javax.swing.JButton jButtonNewCategory;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSelectImage;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JButton jButtonSettings;
    private javax.swing.JComboBox<String> jCategory;
    private javax.swing.JComboBox<String> jComboCategory2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JButton jImport;
    private javax.swing.JComboBox<String> jItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JLabel jLabelData1;
    private javax.swing.JLabel jLabelData2;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton jSearch;
    private javax.swing.JTextArea jTextBlock;
    private javax.swing.JTextField jTextData1;
    private javax.swing.JTextField jTextData2;
    private javax.swing.JTextField jTextName;
    private javax.swing.JTextField jTextPath;
    private javax.swing.JTextField jTextSearch;
    private javax.swing.JTextField jTextShareToEmail;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}

